const { query } = require('./config/database-sqlite');

async function testPropertyAPI() {
  try {
    console.log('üîç Test de l\'API des propri√©t√©s avec propri√©taires...');

    // Test 1: R√©cup√©rer une propri√©t√© avec JOIN sur utilisateurs
    console.log('\n1. Test r√©cup√©ration propri√©t√© avec propri√©taire:');
    
    const propertyWithOwner = await query(`
      SELECT 
        b.*,
        u.nom as proprietaire_nom,
        u.prenom as proprietaire_prenom,
        u.email as proprietaire_email,
        u.telephone as proprietaire_telephone
      FROM biens b
      LEFT JOIN utilisateurs u ON b.proprietaire_id = u.id
      WHERE b.id = 1
    `);

    if (propertyWithOwner.length > 0) {
      const property = propertyWithOwner[0];
      console.log('‚úÖ Propri√©t√© trouv√©e:');
      console.log(`   Titre: ${property.titre}`);
      console.log(`   Propri√©taire: ${property.proprietaire_prenom} ${property.proprietaire_nom}`);
      console.log(`   Email: ${property.proprietaire_email}`);
      console.log(`   T√©l√©phone: ${property.proprietaire_telephone}`);
    } else {
      console.log('‚ùå Aucune propri√©t√© trouv√©e');
    }

    // Test 2: R√©cup√©rer toutes les propri√©t√©s avec propri√©taires
    console.log('\n2. Test r√©cup√©ration toutes propri√©t√©s avec propri√©taires:');
    
    const allPropertiesWithOwners = await query(`
      SELECT 
        b.id,
        b.titre,
        b.prix,
        b.ville,
        u.nom as proprietaire_nom,
        u.prenom as proprietaire_prenom,
        u.email as proprietaire_email,
        u.telephone as proprietaire_telephone
      FROM biens b
      LEFT JOIN utilisateurs u ON b.proprietaire_id = u.id
      ORDER BY b.id
      LIMIT 5
    `);

    console.log(`‚úÖ ${allPropertiesWithOwners.length} propri√©t√©s trouv√©es:`);
    allPropertiesWithOwners.forEach(property => {
      console.log(`   ${property.id}: ${property.titre} - ${property.ville}`);
      console.log(`      Propri√©taire: ${property.proprietaire_prenom} ${property.proprietaire_nom} (${property.proprietaire_email})`);
    });

    // Test 3: V√©rifier les propri√©t√©s sans propri√©taire
    console.log('\n3. Test propri√©t√©s sans propri√©taire:');
    
    const propertiesWithoutOwner = await query(`
      SELECT b.id, b.titre, b.proprietaire_id
      FROM biens b
      LEFT JOIN utilisateurs u ON b.proprietaire_id = u.id
      WHERE u.id IS NULL
    `);

    if (propertiesWithoutOwner.length > 0) {
      console.log(`‚ö†Ô∏è  ${propertiesWithoutOwner.length} propri√©t√©s sans propri√©taire trouv√©es:`);
      propertiesWithoutOwner.forEach(property => {
        console.log(`   ${property.id}: ${property.titre} (proprietaire_id: ${property.proprietaire_id})`);
      });
    } else {
      console.log('‚úÖ Toutes les propri√©t√©s ont un propri√©taire valide');
    }

    // Test 4: V√©rifier la structure de r√©ponse pour l'API
    console.log('\n4. Test structure de r√©ponse API:');
    
    const apiResponse = await query(`
      SELECT 
        b.id,
        b.titre,
        b.description,
        b.type_bien,
        b.statut,
        b.prix,
        b.modalite_paiement,
        b.surface,
        b.nombre_pieces,
        b.adresse_complete,
        b.ville,
        b.code_postal,
        b.latitude,
        b.longitude,
        b.date_publication,
        b.statut_publication,
        u.nom as proprietaire_nom,
        u.prenom as proprietaire_prenom,
        u.email as proprietaire_email,
        u.telephone as proprietaire_telephone,
        u.role as proprietaire_role
      FROM biens b
      LEFT JOIN utilisateurs u ON b.proprietaire_id = u.id
      WHERE b.id = 1
    `);

    if (apiResponse.length > 0) {
      const response = apiResponse[0];
      console.log('‚úÖ Structure de r√©ponse API compl√®te:');
      console.log('   Champs propri√©t√©:', Object.keys(response).filter(key => !key.startsWith('proprietaire_')));
      console.log('   Champs propri√©taire:', Object.keys(response).filter(key => key.startsWith('proprietaire_')));
      
      // Simuler la r√©ponse JSON
      const jsonResponse = {
        success: true,
        data: {
          bien: response
        }
      };
      
      console.log('\nüìã Exemple de r√©ponse JSON:');
      console.log(JSON.stringify(jsonResponse, null, 2));
    }

    console.log('\nüéâ Tests termin√©s avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  }
}

// Ex√©cuter les tests
if (require.main === module) {
  testPropertyAPI().then(() => {
    console.log('\n‚úÖ Script de test termin√©');
    process.exit(0);
  }).catch(error => {
    console.error('‚ùå Erreur:', error);
    process.exit(1);
  });
}

module.exports = { testPropertyAPI };
